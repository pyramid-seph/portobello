name: Deployment (production)

on:
  push:
    branches: ["main"]

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  GODOT_VERSION: "4.4.1"
  GODOT_RELEASE_NAME: "stable"

jobs:
  compile-export-templates-web:
    name: Compile custom export template (web)
    runs-on: ubuntu-24.04
    env: 
      SCONS_VERSION: "4.9.0"
      EMSCRIPTEN_VERSION: "3.1.64"
      BUILD_PROFILE_PATH: "${{ github.workspace }}/main/custom_profile.build"
    
    steps:
      - uses: actions/checkout@v4
        with:
          path: main
      
      - uses: actions/checkout@v4
        with:
          repository: emscripten-core/emsdk
          path: emsdk

      - uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ env.GODOT_VERSION }}-${{ env.GODOT_RELEASE_NAME }}
          path: godotengine

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12.10"
          cache: "pip"

      - name: Install SCons
        run: |
          pip install scons==${{ env.SCONS_VERSION }}
          scons --version

      - name: Install emscripten
        working-directory: emsdk
        env:
           EMSDK_VERBOSE: 0 
        run: |
          ./emsdk install ${{ env.EMSCRIPTEN_VERSION }}
          ./emsdk activate ${{ env.EMSCRIPTEN_VERSION }} --permanent
          echo "${{ github.workspace }}/emsdk" >> "$GITHUB_PATH"
          echo "${{ github.workspace }}/emsdk/upstream/emscripten" >> "$GITHUB_PATH"

      - name: Compile custom web build template
        working-directory: godotengine
        run: |
          scons platform=web \
              target=template_release \
              optimize=size \
              vulkan=no \
              use_volk=no \
              use_closure_compiler=yes \
              tools=no \
              deprecated=no \
              threads=no \
              redirect_build_objects=no \
              tests=no \
              debug_symbols=no \
              openxr=no \
              svg=no \
              minizip=no \
              disable_3d=yes \
              engine_update_check=no \
              build_profile=${{ env.BUILD_PROFILE_PATH }}
          mkdir -vp ../export_templates/
          mv -v bin/godot.web.template_release.wasm32.nothreads.zip \
              ../export_templates/web_nothreads_release.zip

      - uses: actions/upload-artifact@v4
        with:
          name: export_templates
          path: ${{ github.workspace }}/export_templates/
          retention-days: 1
  
  export-web:
    name: Build Godot project (web)
    runs-on: ubuntu-24.04
    needs: compile-export-templates-web
    env:
      BUTLER_VERSION: "15.24.0"
      EXPORT_PRESET_NAME: "Web"
  
    steps:
      - uses: actions/checkout@v4
        with:
          path: main

      - uses: actions/download-artifact@v4
      
      - name: Install export templates
        env:
          GODOT_RELEASE: ${{ env.GODOT_VERSION }}-${{ env.GODOT_RELEASE_NAME }}
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.${{ env.GODOT_RELEASE_NAME }}
          if [[ -d export_templates ]]; then
            echo Installing custom export templates...
            mv -v export_templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.${{ env.GODOT_RELEASE_NAME }}
          else
            echo Installing default export templates...
            wget -q https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_RELEASE }}/Godot_v${{ env.GODOT_RELEASE }}_export_templates.tpz
            unzip -q Godot_v${{ env.GODOT_RELEASE }}_export_templates.tpz
            mv -v templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.${{ env.GODOT_RELEASE_NAME }}
            rm -r Godot_v${{ env.GODOT_RELEASE }}_export_templates.tpz
          fi
      
      - name: Download Godot
        env:
          GODOT_RELEASE: ${{ env.GODOT_VERSION }}-${{ env.GODOT_RELEASE_NAME }}
        run: |
          wget -q https://github.com/godotengine/godot-builds/releases/download/${{ env.GODOT_RELEASE }}/Godot_v${{ env.GODOT_RELEASE }}_linux.x86_64.zip
          unzip -q Godot_v${{ env.GODOT_RELEASE }}_linux.x86_64.zip
          rm Godot_v${{ env.GODOT_RELEASE }}_linux.x86_64.zip
          mv -v Godot_v${{ env.GODOT_RELEASE }}_linux.x86_64 godot
          ./godot -v --editor --quit --headless
      
      - name: Build for web
        run: |
          mkdir -vp ${{ github.workspace }}/builds/web
          ./godot --headless --path ${{ github.workspace }}/main \
            --export-release "${{ env.EXPORT_PRESET_NAME }}" ${{ github.workspace }}/builds/web/index.html
          echo "Success compiling a new web build"
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: builds
          path: ${{ github.workspace }}/builds
          retention-days: 1

      - name: Upload artifact for Github Pages
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ github.workspace }}/builds/web/
          retention-days: 1
    
  parse-project-godot:
    name: Parse godot.project info
    runs-on: ubuntu-24.04
    needs: export-web
    outputs:
      version-name: ${{ steps.parse-project-godot.outputs.version-name }}
    
    steps:
      - uses: actions/checkout@v4
    
      - id: parse-project-godot
        run: |
          awk -F= '/config\/version/ { gsub("\"", ""); print "version-name=" $2 }' project.godot >> $GITHUB_OUTPUT

  deploy-to-itch:
    name: Deploy to Itch
    runs-on: ubuntu-24.04
    needs: [export-web, parse-project-godot]
    env:
      BUTLER_VERSION: "15.24.0"
      ITCH_USER: "pyramid-seph"
      ITCH_PROJECT: "bucho-busca-comida-portobello-ex"
      BUILD_NUMBER: ${{ needs.parse-project-godot.outputs.version-name }}
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: builds

      - name: Deploy to Itch
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        run: |
          curl -q -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/${{ env.BUTLER_VERSION }}/archive/default
          unzip -q butler.zip
          chmod +x butler
          zip -vr web.zip web
          ./butler push web.zip ${{ env.ITCH_USER }}/${{ env.ITCH_PROJECT }}:html --userversion ${{ env.BUILD_NUMBER }}

  deploy-to-github-pages:
    name: Deploy to Github Pages
    runs-on: ubuntu-24.04
    needs: [export-web, parse-project-godot]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Setup Github Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-github-release:
    name: Create Github release 
    runs-on: ubuntu-24.04
    needs: [deploy-to-itch, deploy-to-github-pages, parse-project-godot]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.parse-project-godot.outputs.version-name }}
          generate_release_notes: true
          draft: true
